import { Component,NgZone,ElementRef,Renderer2, ViewChild, 
  OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { IpcRenderer } from 'electron';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { ConfirmationDialogComponent } from '../../sharedComponentModule/confirmation-dialog/confirmation-dialog.component';
import { MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { PassDialogComponent} from '../../sharedComponentModule/pass-dialog/pass-dialog.component';
import { NgxSpinnerService } from "ngx-spinner";
@Component({
  selector: 'app-voice-settings',
  templateUrl: './voice-settings.component.html',
  styleUrls: ['./voice-settings.component.scss']
})
export class VoiceSettingsComponent implements OnInit {
  backcol ="p"
  self = this;
  chanval
  freqtable
  set_channel_id
  set_channel_freq
  set_channel_freq_type
  set_channel_type
  
  private ipc: IpcRenderer;
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;
  displayedColumns: string[] = ['channel_id','type', 'buttons'];
  displayedColumnsName: string[] = ['channel_id','type','buttons'];
  AllElement: MatTableDataSource<any>;

  return_msg_dmr = ""

  channel_change_drop
  inputval
  setfreqval
  setid_val
  rcvr_grp_id
  set_color_id
  set_ctcss

  dmr_return_msg
  get_freq_table
  get_curr_chan

  ////////////////
  accept_dialog_alradyopen
  accept_dialogRef 

  ack_perm_for_long_msg_star_handshake
  long_data_all_str_rcvd 
  /////////////////////////
  sq_set_result

  voice_enc_key
  data_low_power: any[] = [0x68,0x17,0x01,0x01,0x00,0x01,0xff,0x10]
  //[0x68,0x17,0x01,0x01,0x97,0xd5,0x00,0x01,0xff,0x10]
  constructor(  private cdref: ChangeDetectorRef,zone:NgZone,private snackBar: MatSnackBar,  public _router: Router,
    public dialog: MatDialog, private router: Router,private spinner: NgxSpinnerService) { 
    this.self = this

    if ((<any>window).require) {
      try {
        this.ipc = (<any>window).require('electron').ipcRenderer
        console.log("ipc startttttt voice")
        this.dmr_return_msg = (event, data) => {
          zone.run(()=>{
            this.return_msg_dmr = data.msg.res
            if(data.msg.res_id == 1){//channel changed now change encryption or frequency
                 let freq_str = Number(this.freqtable.find(x=> parseInt(x.channel_id) == parseInt(this.channel_change_drop)).frequency).toString(16) //Number(this.setfreqval).toString(16)
                  console.log("this.freqtable.find(x=>x.channel_id == this.channel_change_drop)-",freq_str)
                  if(freq_str ){
                    let setfre = [0x68,0x0d,0x01,0x01,0x00,0x08, 
                      Number("0x"+ freq_str.substr(6,2)), Number("0x"+ freq_str.substr(4,2)),
                      Number("0x"+ freq_str.substr(2,2)), Number("0x"+ freq_str.substr(0,2)),   
                      Number("0x"+ freq_str.substr(6,2)), Number("0x"+ freq_str.substr(4,2)),
                      Number("0x"+ freq_str.substr(2,2)), Number("0x"+ freq_str.substr(0,2)),
                      0x10 ]
                    let checksum = this.checksumcalc(setfre,setfre.length).toString(16)
                    let finarr = [setfre[0],setfre[1],setfre[2],setfre[3],
                    Number("0x"+ checksum.substr(0,2)),Number("0x"+ checksum.substr(2,2)),
                    setfre[4],setfre[5],setfre[6],setfre[7],setfre[8],setfre[9],setfre[10],setfre[11],
                    setfre[12],setfre[13],setfre[14] ]
                    console.log("final set freqq-", finarr)
                    this.ipc.send('stm_send_dmr',finarr);
    
                  }
              
            }
            if(data.msg.res_id == 13){ // if also freq changed then success
              zone.run(()=>{
                this.snackBar.open(' Channel changed successfully ', "Remove", {
                  duration: 5000, verticalPosition: 'top', panelClass: ['blue-snackbar']
                });
                this.set_channel_id = this.channel_change_drop         
                this.set_channel_freq = this.freqtable.find(x=> x.channel_id == parseInt(this.set_channel_id)).frequency
                if(parseInt(this.set_channel_id) <= 8 ){
                  if(this.set_channel_id == 7 || this.set_channel_id == 8)
                    this.set_channel_type = "Digital Enc"
                  else{
                    this.set_channel_type = "Digital"
                  }
                }else{
                  this.set_channel_type = "Analog"
                }
                if(this.set_channel_id == 1 || this.set_channel_id == 2 || this.set_channel_id == 3
                   || this.set_channel_id == 7 || this.set_channel_id == 8 || this.set_channel_id == 9
                   || this.set_channel_id == 10 ){
                     this.set_channel_freq_type = "Military Freqyency"
                }else{
                  this.set_channel_freq_type = "Non Military Freqyency"
                }
                //// SEND MCU CHANNEL STATUS
                let cid
                if(this.set_channel_id.toString(16).length < 10){
                  cid = Number("0x0" + this.set_channel_id.toString(16))
                }else{
                  cid = Number("0x" + this.set_channel_id.toString(16))
                }
                let fin_val = [0x29,Number("0x" + this.set_channel_id.toString().length.toString()),
                    cid,0x63]
                console.log("sending freq val", fin_val)
                this.ipc.send("send_freq_val_status", fin_val)
                ////////save channel in database
                this.ipc.send('db_save_curr_chan',{channel_id:this.channel_change_drop,frequency:"saved" });

                ////////////////////////////
                this.spinner.hide()
              })
              

            }// check ffreq end
            if(data.msg.res_id == 25){ // if encryption changed then change channel
              let tochksum = [0x68,0x01,0x01,0x01,0x00,0x01,this.chanval,0x10]
              let checksum = this.checksumcalc(tochksum ,tochksum.length).toString(16)
              let finval = [tochksum[0],tochksum[1],tochksum[2],tochksum[3],
                Number("0x"+ checksum.substr(0,2)),  Number("0x"+ checksum.substr(2,2)),
                tochksum[4],tochksum[5],tochksum[6],tochksum[7]]
              console.log("finval",finval)
              this.ipc.send('stm_send_dmr',finval);
            }

          })
        }
        this.get_curr_chan = (event, data)=>{
          zone.run(()=>{
            this.voice_enc_key = data.voice_enc_key
            console.log("voice enc key is--", data.voice_enc_key)
            this.set_channel_id = data.msg.channel_id          
            this.set_channel_freq = this.freqtable.find(x=> x.channel_id == parseInt(this.set_channel_id)).frequency

            if(parseInt(this.set_channel_id) <= 8 ){
              if(this.set_channel_id == 7 || this.set_channel_id == 8)
                this.set_channel_type = "Digital Enc"
              else{
                this.set_channel_type = "Digital"
              }
            }else{
              this.set_channel_type = "Analog"
            }
            if(this.set_channel_id == 1 || this.set_channel_id == 2 || this.set_channel_id == 3
               || this.set_channel_id == 7 || this.set_channel_id == 8 || this.set_channel_id == 9
               || this.set_channel_id == 10 ){
                 this.set_channel_freq_type = "Military Freqyency"
            }else{
              this.set_channel_freq_type = "Non Military Freqyency"
            }

          })
         
        }
        this.get_freq_table = (event, data) => { // freq table recieved
          zone.run(()=>{
            this.freqtable = data.msg
            let new_arr = []
            data.msg.map((mapval,index)=>{

              if(mapval.channel_id == '6' || mapval.channel_id == 15 || mapval.channel_id == 16){
                if(mapval.channel_id == '6'){
                  mapval.type = "Digital"
                }else{
                  mapval.type = "Analog"
                }
                new_arr.push(mapval)
              }
              if(index == data.msg.length - 1){
                this.AllElement = new MatTableDataSource(new_arr as any);
                this.AllElement.paginator = this.paginator;
                // now get curr channel
                this.ipc.send('send_curr_chan',"true");
              }
            })

            //console.log("freq table is-", data.msg)

          })
        }
        this.sq_set_result = (event,data) =>{
          zone.run(()=>{
            this.spinner.show()
            setTimeout(function(){
              this.spinner.hide()
            }.bind(this),6000)
            this.snackBar.open('SQ set successfully', "Remove", {
              duration: 8000,
              verticalPosition: 'top',
              panelClass: ['blue-snackbar']
            });
            return
          })
        }
        ///////////////////
              //
      this.long_data_all_str_rcvd = (event, obj) => {
        console.log("all long data rcvd ",obj.msg)
        zone.run(()=>{
          this.snackBar.open(' You recieved a new mail ', "Remove", {
            duration: 5000,
            verticalPosition: 'top',
            panelClass: ['blue-snackbar']
          });
        })
      }
      ///////////////////////
      this.ack_perm_for_long_msg_star_handshake = (event,data)=>{
        zone.run(()=>{
          console.log("recieved request to allow transmission")
          this.router.navigate(['/longmessage'])
          /*if(!this.accept_dialog_alradyopen){
            this.accept_dialog_alradyopen = true
                this.accept_dialogRef = this.dialog.open(ConfirmationDialogComponent, {
                  width: '250px',
                  hasBackdrop: true,
                  disableClose: true,
                  data: "Do you want to accept Incoming Mail "
                });
              this.accept_dialogRef.afterClosed().subscribe(result=>{    
                console.log("value of result--",result)
                if(result){
                  this.ipc.send("perm_of_acceptance_long_msg",true)
                  this.accept_dialogRef.close('Closing')
                  this.router.navigate(['/longmessage'])
                }else{
                  this.ipc.send("perm_of_acceptance_long_msg",false)
                  this.accept_dialogRef.close('Closing')
                }
              })
              /////////////////////////////////
              setTimeout(function(){
                if(this.accept_dialogRef){     
                  this.accept_dialogRef.close()
                  //this.ipc.send("perm_of_acceptance_long_msg",false)
                  console.log("after 22 sec")

                }
              }.bind(this),22 * 1000)
              setTimeout(function(){
                this.accept_dialog_alradyopen = false // be ready to rcv again
              }.bind(this),50 * 1000)
              /////////////////////////////////////
          }*/

        })
      } 
        this.ipc.on('dmr_return_msg', this.dmr_return_msg)
        this.ipc.on('get_curr_chan',this.get_curr_chan)
        this.ipc.on('get_freq_table', this.get_freq_table)
        this.ipc.on('sq_set_result',this.sq_set_result)
        this.ipc.on('long_data_all_str_rcvd',this.long_data_all_str_rcvd)
        this.ipc.on('ack_perm_for_long_msg_star_handshake',this.ack_perm_for_long_msg_star_handshake)
           
      }catch(e){}
    }
  }
  ngOnDestroy(){
    this.ipc.removeListener('dmr_return_msg', this.dmr_return_msg)
    this.ipc.removeListener('get_curr_chan',this.get_curr_chan)
    this.ipc.removeListener('get_freq_table', this.get_freq_table)
    this.ipc.removeListener('sq_set_result', this.sq_set_result)
    this.ipc.removeListener('long_data_all_str_rcvd',this.long_data_all_str_rcvd)
    this.ipc.removeListener('ack_perm_for_long_msg_star_handshake',this.ack_perm_for_long_msg_star_handshake)
      
  }
  ngOnInit(): void {
    this.ipc.send('send_freq_table',"true");
  }
  ngAfterContentChecked() {
    this.backcol = localStorage.getItem('back_col_val')
    this.cdref.detectChanges();
    
  }
  advancedSet(){
    //
    const passdialogRef = this.dialog.open(PassDialogComponent, {
      width: '450px',
      hasBackdrop: true
      //data: "Are you sure you want to change Channel?"
    });
    passdialogRef.afterClosed().subscribe(dpass => {
      console.log("dpass is--", dpass)
      if(dpass == "Intricate21"){
        this.router.navigate(['/advvoiceset'])
      }
    })

  }
  channelChangeSubmit(vall){
    const dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      width: '450px',
      hasBackdrop: true,
      data: "Are you sure, you want to change channel?"
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result){
        this.spinner.show()
        setTimeout(function(){
          this.spinner.hide()
        }.bind(this),8000)
        //this.ipc.send('db_save_curr_chan',vall);
        this.channel_change_drop = vall
        console.log("this.channel_change_drop",this.channel_change_drop)
        if(this.channel_change_drop){
            if(this.channel_change_drop == 1){
              this.chanval = 0x01
            }else if(this.channel_change_drop == 2){
              this.chanval = 0x02
            }else if(this.channel_change_drop == 3){
              this.chanval = 0x03
            }else if(this.channel_change_drop == 4){
              this.chanval = 0x04
            }else if(this.channel_change_drop == 5){
              this.chanval = 0x05
            }else if(this.channel_change_drop == 6){
              this.chanval = 0x06
            }else if(this.channel_change_drop == 7){
              this.chanval = 0x07
            }else if(this.channel_change_drop == 8){
              this.chanval = 0x08
            }else if(this.channel_change_drop == 9){
              this.chanval = 0x09
            }else if(this.channel_change_drop == 10){
              this.chanval = 0x0a
            }else if(this.channel_change_drop == 11){
              this.chanval = 0x0b
            }else if(this.channel_change_drop == 12){
              this.chanval = 0x0c
            }else if(this.channel_change_drop == 13){
              this.chanval = 0x0d
            }else if(this.channel_change_drop == 14){
              this.chanval = 0x0e
            }else if(this.channel_change_drop == 15){
              this.chanval = 0x0f
            }else if(this.channel_change_drop == 16){
              this.chanval = 0x10
            }
            // set the encryption first 
            if(this.channel_change_drop <= 8  ){// change encryption first
              if(this.channel_change_drop == 7 || this.channel_change_drop == 8){
                //let finarr = [0x68,0x19,0x01,0x01,0x95,0xd4,0x00,0x01,0x01,0x10]
                //this.ipc.send('stm_send_dmr',finarr);
                // with key encryption
                let a1,a2,a3,a4,a5,a6,a7,a8
                if(!isNaN(this.voice_enc_key.substr(0,1))){
                  a1 = parseInt("0x3" + this.voice_enc_key.substr(0,1),16)
                }else{
                  a1 = parseInt("0x6" + this.voice_enc_key.substr(0,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(1,1))){
                  a2 = parseInt("0x3" + this.voice_enc_key.substr(1,1),16)
                }else{
                  a2 = parseInt("0x6" + this.voice_enc_key.substr(1,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(2,1))){
                  a3 = parseInt("0x3" + this.voice_enc_key.substr(2,1),16)
                }else{
                  a3 = parseInt("0x6" + this.voice_enc_key.substr(2,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(3,1))){
                  a4 = parseInt("0x3" + this.voice_enc_key.substr(3,1),16)
                }else{
                  a4 = parseInt("0x6" + this.voice_enc_key.substr(3,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(4,1))){
                  a5 = parseInt("0x3" + this.voice_enc_key.substr(4,1),16)
                }else{
                  a5 = parseInt("0x6" + this.voice_enc_key.substr(4,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(5,1))){
                  a6 = parseInt("0x3" + this.voice_enc_key.substr(5,1),16)
                }else{
                  a6 = parseInt("0x6" + this.voice_enc_key.substr(5,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(6,1))){
                  a7 = parseInt("0x3" + this.voice_enc_key.substr(6,1),16)
                }else{
                  a7 = parseInt("0x6" + this.voice_enc_key.substr(6,1),16)
                }
                if(!isNaN(this.voice_enc_key.substr(7,1))){
                  a8 = parseInt("0x3" + this.voice_enc_key.substr(7,1),16)
                }else{
                  a8 = parseInt("0x6" + this.voice_enc_key.substr(7,1),16 )
                }
                
                let tochksum = [0x68, 0x19, 0x01, 0x01, 0x00, 0x09, 
                  0x01,a1,a2,a3,a4,a5,a6,a7,a8, 0x10]
                let checksum = this.checksumcalc(tochksum ,tochksum.length).toString(16)
                let finval = [tochksum[0],tochksum[1],tochksum[2],tochksum[3],
                Number("0x"+ checksum.substr(0,2)),  Number("0x"+ checksum.substr(2,2)),
                tochksum[4],tochksum[5],tochksum[6],tochksum[7],
                tochksum[8],tochksum[9],tochksum[10],tochksum[11],tochksum[12],tochksum[13],
                tochksum[14],tochksum[15]
                ]
                console.log("writing enc key", finval)
                this.ipc.send('stm_send_dmr',finval);
                  
              }else{//create encryption
                let finarr = [0x68,0x19,0x01,0x01,0x97,0xd3 ,0x00,0x01,0xFF,0x10]
                this.ipc.send('stm_send_dmr',finarr);
              }
            }else{// change channel
              let tochksum = [0x68,0x01,0x01,0x01,0x00,0x01,this.chanval,0x10]
              let checksum = this.checksumcalc(tochksum ,tochksum.length).toString(16)
              let finval = [tochksum[0],tochksum[1],tochksum[2],tochksum[3],
                Number("0x"+ checksum.substr(0,2)),  Number("0x"+ checksum.substr(2,2)),
                tochksum[4],tochksum[5],tochksum[6],tochksum[7]]
              console.log("finval",finval)
              this.ipc.send('stm_send_dmr',finval);
            }

        }
        else{
          this.snackBar.open('Select a channel first', "Remove", {
            duration: 5000, verticalPosition: 'top', panelClass: ['blue-snackbar']
          });
        }
      }
    })

  }
  changesq(val){
    if(this.set_channel_id <= 8){
      this.snackBar.open('SQL settings only for analog channel', "Remove", {
        duration: 5000, verticalPosition: 'top', panelClass: ['blue-snackbar']
      });
      return
    }
    let aa = 0x00
    if(val == 1){
      aa = 0x00
    }else if(val == 2){
      aa = 0x01
    }else if(val == 3){
      aa = 0x02
    }
    // 68 12 01 01 95 DB 00 01 01 10
    let tochksum = [0x68,0x12,0x01,0x01,0x00,0x01,aa,0x10]
    let checksum = this.checksumcalc(tochksum ,tochksum.length).toString(16)
    let finval = [tochksum[0],tochksum[1],tochksum[2],tochksum[3],
      Number("0x"+ checksum.substr(0,2)),  Number("0x"+ checksum.substr(2,2)),
      tochksum[4],tochksum[5],tochksum[6],tochksum[7]]
    console.log("finval",finval)
    this.ipc.send('stm_send_dmr',finval);
  }
  onEdit(id){
    console.log("onedit id id--",id)
    console.log("onedit id id--",id)
    this._router.navigate(['/freqedit', id]);

  }
  changebackcol(){
    if(this.backcol == "p"){
      this.backcol = "g"
      localStorage.setItem('back_col_val',"g")
    }else{
      this.backcol = "p"
      localStorage.setItem('back_col_val',"p")
    }
  }
  checksumcalc(buf,len){
    let sum = 0
    var index = 0
    while(len > 1){
       // console.log("buf index--", buf[index], buf[index] << 8 )
      sum+= 0xFFFF & (buf[index] << 8 | buf[index+1]);
      index += 2
      len -= 2
     // console.log("sum--",sum)

      //index++
    }
    if(len){
      sum += (0xff & buf[index]) << 8

    }
    while(sum >> 16){
      sum = (sum & 0xFFFF) + (sum >> 16)
    }
    return sum ^ 0xFFFF
  }


}

